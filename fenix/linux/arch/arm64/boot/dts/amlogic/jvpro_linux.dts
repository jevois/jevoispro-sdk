/*
 * arch/arm64/boot/dts/amlogic/jvpro_linux.dts
 *
 * inspired by arch/arm64/boot/dts/amlogic/kvim3_linux.dts
 *
 * Copyright (C) 2020 JeVois Inc. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 */

/dts-v1/;

#include "mesong12b.dtsi"
#include "partition_linux.dtsi"

/ {
	model = "JeVois Pro";
	amlogic-dt-id = "g12b_jvpro";
	compatible = "amlogic, g12b";
	interrupt-parent = <&gic>;
	#address-cells = <2>;
	#size-cells = <2>;

	chosen { };

	aliases {
		serial0 = &uart_AO; // on by default
		serial1 = &uart_A;
		serial2 = &uart_B;
		serial3 = &uart_C;
		serial4 = &uart_AO_B;
		i2c0 = &i2c0;
		i2c1 = &i2c1;
		i2c2 = &i2c2;
		i2c3 = &i2c3;
		i2c4 = &i2c_AO;
		tsensor0 = &p_tsensor;
		tsensor1 = &d_tsensor;
		spi1 = &spicc1;
	};

    //	memory@00000000 {
        //		device_type = "memory";
        //		linux,usable-memory = <0x0 0x0 0x0 0x80000000>;
    //	};

	reserved-memory {
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;
        
		/* global autoconfigured region for contiguous allocations */
		ramoops@0x07400000 {
			compatible = "ramoops";
			reg = <0x0 0x07400000 0x0 0x00100000>;
			record-size = <0x8000>;
			console-size = <0x8000>;
			ftrace-size = <0x40000>;
		};

		secmon_reserved:linux,secmon {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x0 0x400000>;
			alignment = <0x0 0x400000>;
			alloc-ranges = <0x0 0x05000000 0x0 0x400000>;
			clear-map;
		};

		secos_reserved:linux,secos {
			status = "disable";
			compatible = "amlogic, aml_secos_memory";
			reg = <0x0 0x05300000 0x0 0x2000000>;
			no-map;
		};
        
		logo_reserved:linux,meson-fb {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x0 0x800000>;
			alignment = <0x0 0x400000>;
			alloc-ranges = <0x0 0x7f800000 0x0 0x800000>;
		};
        
		ion_cma_reserved:linux,ion-dev {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x0 0x8000000>;
			alignment = <0x0 0x400000>;
		};

		//di_reserved:linux,di {
			//compatible = "amlogic, di-mem";
			/* buffer_size = 3621952(yuv422 8bit) */
			/* 4179008(yuv422 10bit full pack mode) */
			/** 10x3621952=34.6M(0x23) support 8bit **/
			/** 10x4736064=45.2M(0x2e) support 12bit **/
			/** 10x4179008=40M(0x28) support 10bit **/
			//size = <0x0 0x2800000>;
			//no-map;
		//};
        
		/*di CMA pool */
		di_cma_reserved:linux,di_cma {
			compatible = "shared-dma-pool";
			reusable;
			/* buffer_size = 3621952(yuv422 8bit)
			 *  | 4736064(yuv422 10bit)
			 *  | 4074560(yuv422 10bit full pack mode)
			 * 10x3621952=34.6M(0x23) support 8bit
			 * 10x4736064=45.2M(0x2e) support 12bit
			 * 10x4074560=40M(0x28) support 10bit
			 */
			size = <0x0 0x02800000>;
			alignment = <0x0 0x400000>;
		};
        
		/*  POST PROCESS MANAGER */
		ppmgr_reserved:linux,ppmgr {
			compatible = "shared-dma-pool";
			size = <0x0 0x0>;
		};
        
		codec_mm_cma:linux,codec_mm_cma {
			compatible = "shared-dma-pool";
			reusable;
			/* ion_codec_mm max can alloc size 80M*/
			size = <0x0 0x13400000>;
			alignment = <0x0 0x400000>;
			linux,contiguous-region;
		};
        
		/* codec shared reserved */
		codec_mm_reserved:linux,codec_mm_reserved {
			compatible = "amlogic, codec-mm-reserved";
			size = <0x0 0x0>;
			alignment = <0x0 0x100000>;
			//no-map;
		};
        
		/*  vdin0 CMA pool */
		vdin0_cma_reserved:linux,vdin0_cma {
			compatible = "shared-dma-pool";
			reusable;
		    /* 1920x1080x2x4  =16+4 M */
			size = <0x0 0x04000000>;
			alignment = <0x0 0x400000>;
		};
        
		/*  vdin1 CMA pool */
		vdin1_cma_reserved:linux,vdin1_cma {
			compatible = "shared-dma-pool";
			reusable;
			/* 1920x1080x2x4  =16 M */
			size = <0x0 0x04000000>;
			alignment = <0x0 0x400000>;
		};
        
		galcore_reserved:linux,galcore {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x0 0x1000000>;
			alignment = <0x0 0x400000>;
			linux,contiguous-region;
		};
        
		isp_cma_reserved:linux,isp_cma {
			compatible = "shared-dma-pool";
			reusable;
			status = "okay";
			size = <0x0 0x1f000000>;
			alignment = <0x0 0x400000>;
		};

		adapt_cma_reserved:linux,adapt_cma {
			compatible = "shared-dma-pool";
			reusable;
			status = "okay";
			size = <0x0 0x03000000>;
			alignment = <0x0 0x400000>;
		};
		gdc_cma_reserved:linux,gdc_cma {
			compatible = "shared-dma-pool";
			reusable;
			status = "okay";
			size = <0x0 0x04000000>;
			alignment = <0x0 0x400000>;
		};
	};

    // GPU:
	galcore {
		status = "okay";
		memory-region = <&galcore_reserved>;
	};

    // JEVOIS red LED on GPIOAO_4
	gpioleds {
		compatible = "gpio-leds";
		status = "okay";

		sys_led {
			label="sys_led";
			gpios=<&gpio_ao GPIOAO_4 GPIO_ACTIVE_HIGH>;
			default-state ="on";
			retain-state-suspended;
			linux,default-trigger="default-on";
		};
	};

    // JEVOIS: cvbs output not connected
    cvbsout {
		compatible = "amlogic, cvbsout-g12b";
		dev_name = "cvbsout";
		status = "disabled";
		clocks = <&clkc CLKID_VCLK2_ENCI
			&clkc CLKID_VCLK2_VENCI0
			&clkc CLKID_VCLK2_VENCI1
			&clkc CLKID_DAC_CLK>;
		clock-names = "venci_top_gate",
			"venci_0_gate",
			"venci_1_gate",
			"vdac_clk_gate";

		/* performance: reg_address, reg_value */
		/* g12b */
		performance = <0x1bf0  0x9
			0x1b56  0x333
			0x1b12  0x8080
			0x1b05  0xfd
			0x1c59  0xf850
			0xffff  0x0>; /* ending flag */
		performance_sarft = <0x1bf0  0x9
			0x1b56  0x333
			0x1b12  0x0
			0x1b05  0x9
			0x1c59  0xfc48
			0xffff  0x0>; /* ending flag */
	};

    // JEVOIS for optional add-in M.2 wifi/bluetooth card
    // JEVOIS uses: GPIOX_17=BT_EN, GPIOX_18=BT_WAKE_HOST, GPIOX_19=HOST_WAKE_BT
    // See linux/drivers/amlogic/bluetooth/bt_device.c
    // Looks like BT_WAKE_HOST is not supported in driver; it supports reset but we do not have that on the M.2 conn.
    // Note: disabled by default, can be enabled with wifi-bt.dts overlay.
	bt_dev {
		compatible = "amlogic, bt-dev";
		dev_name = "bt-dev";
		status = "disabled";
		//gpio_reset = <&gpio GPIOX_17 GPIO_ACTIVE_HIGH>;
		gpio_en = <&gpio GPIOX_17 GPIO_ACTIVE_HIGH>;
		gpio_hostwake = <&gpio GPIOX_19 GPIO_ACTIVE_HIGH>;
	};

    // JEVOIS for optional add-in M.2 wifi/bluetooth card
    // JEVOIS uses GPIOX_6=WIFI_PWREN, GPIOX_7=WIFI_WAKE_HOST, GPIOX_16/PWM_E=WIFI_32K
    // GPIOA_10 = PCIE_ALERT#
    // See linux/drivers/amlogic/wifi/wifi_dt.c
    // Note: disabled by default, can be enabled with wifi-bt.dts overlay.
	wifi {
		compatible = "amlogic, aml_wifi";
		dev_name = "aml_wifi";
		status = "disabled";
		interrupt_pin = <&gpio GPIOA_10 GPIO_ACTIVE_HIGH>;
		irq_trigger_type = "GPIO_IRQ_LOW";
		power_on_pin = <&gpio GPIOX_6 GPIO_ACTIVE_HIGH>;
		//dhd_static_buf;	// if use bcm wifi, config dhd_static_buf
		pinctrl-names = "default";
		pinctrl-0 = <&pwm_e_pins>;
		pwm_config = <&wifi_pwm_conf>;
	};

    // Configuration for PWM E and F.
    // JEVOIS uses PWM_E on GPIOX_16 for WIFI_32K, PWM_F unused (available on CAM_ID3)
	wifi_pwm_conf:wifi_pwm_conf {
		pwm_channel1_conf {
			pwms = <&pwm_ef MESON_PWM_0 30541 0>;
			duty-cycle = <15270>;
			times = <10>;
		};
        
        // FIXME what is this for?
		pwm_channel2_conf {
			pwms = <&pwm_ef MESON_PWM_2 30500 0>;
			duty-cycle = <15250>;
			times = <12>;
		};
	};

	picdec_cma_reserved:linux,picdec {
		compatible = "shared-dma-pool";
		reusable;
		size = <0x0>;
		alignment = <0x0>;
		linux,contiguous-region;
	};

	codec_mm {
		compatible = "amlogic, codec, mm";
		memory-region = <&codec_mm_cma &codec_mm_reserved>;
		dev_name = "codec_mm";
		status = "okay";
	};

	ppmgr {
		compatible = "amlogic, ppmgr";
		memory-region = <&ppmgr_reserved>;
		dev_name = "ppmgr";
		status = "okay";
	};

	gpiomem {
		compatible = "amlogic, gpiomem";
		reg = <0x0 0xff634000 0x0 0x1000>;
		dev_name = "gpiomem";
		status = "okay";
	};

	gpiomem_ao {
		compatible = "amlogic, gpiomem";
		reg = <0x0 0xff800000 0x0 0x1000>;
		dev_name = "gpiomem-ao";
		status = "okay";
	};

	picdec {
		compatible = "amlogic, picdec";
		memory-region = <&picdec_cma_reserved>;
		dev_name = "picdec";
		status = "okay";
	};

	deinterlace {
		compatible = "amlogic, deinterlace";
		status = "okay";
		/* 0:use reserved; 1:use cma; 2:use cma as reserved */
		flag_cma = <1>;
		//memory-region = <&di_reserved>;
		memory-region = <&di_cma_reserved>;
		interrupts = <0 46 1
				0 40 1>;
		interrupt-names = "pre_irq", "post_irq";
		clocks = <&clkc CLKID_VPU_CLKB_TMP_COMP>,
			<&clkc CLKID_VPU_CLKB_COMP>;
		clock-names = "vpu_clkb_tmp_composite",
			"vpu_clkb_composite";
		clock-range = <334 667>;
		/* buffer-size = <3621952>;(yuv422 8bit) */
		buffer-size = <4074560>;/*yuv422 fullpack*/
		/* reserve-iomap = "true"; */
		/* if enable nr10bit, set nr10bit-support to 1 */
		post-wr-support = <1>;
		nr10bit-support = <1>;
		nrds-enable = <1>;
		pps-enable = <1>;
	};
    
	ionvideo {
		compatible = "amlogic, ionvideo";
		dev_name = "ionvideo";
		status = "okay";
	};

	amlvideo2_0 {
		compatible = "amlogic, amlvideo2";
		dev_name = "amlvideo2";
		status = "okay";
		amlvideo2_id = <0>;
		cma_mode = <1>;
	};

	amlvideo2_1 {
		compatible = "amlogic, amlvideo2";
		dev_name = "amlvideo2";
		status = "okay";
		amlvideo2_id = <1>;
		cma_mode = <1>;
	};

    // JEVOIS: we have no button, thus disabled, except dolby_fw needs it when compiling the kernel. So assign an unused
    // GPIO, eg GPIOAO_7 (unconnected on jevois)
	gpio_keypad {
		compatible = "amlogic, gpio_keypad";
		status = "disabled";
		scan_period = <20>;
		key_num = <1>;
		key_name = "power";
		key_code = <116>;
		key-gpios = <&gpio_ao GPIOAO_7 GPIO_ACTIVE_HIGH>; /* GPIOAO_7 */
		detect_mode = <0>;/*0:polling mode, 1:irq mode*/
	};

    // JEVOIS: the SARADC converter is unconnected. Here only for software compaibility.
	adc_keypad {
		compatible = "amlogic, adc_keypad";
		status = "disabled";
		key_name = "vol-", "vol+", "enter";
		key_num = <3>;
		io-channels = <&saradc SARADC_CH2>;
		io-channel-names = "key-chan-2";
		key_chan = <SARADC_CH2 SARADC_CH2 SARADC_CH2>;
		key_code = <114 115 28>;
		key_val = <143 266 389>; //val=voltage/1800mV*1023
		key_tolerance = <40 40 40>;
	};

    // JEVOIS: this is for data stored in OTP memory
	unifykey{
		compatible = "amlogic, unifykey";
		status = "ok";
		unifykey-num = <16>;
		unifykey-index-0 = <&keysn_0>;
		unifykey-index-1 = <&keysn_1>;
		unifykey-index-2 = <&keysn_2>;
		unifykey-index-3 = <&keysn_3>;
		unifykey-index-4 = <&keysn_4>;
		unifykey-index-5 = <&keysn_5>;
		unifykey-index-6 = <&keysn_6>;
		unifykey-index-7 = <&keysn_7>;
		unifykey-index-8 = <&keysn_8>;
		unifykey-index-9 = <&keysn_9>;
		unifykey-index-10= <&keysn_10>;
		unifykey-index-11= <&keysn_11>;
		unifykey-index-12= <&keysn_12>;
		unifykey-index-13= <&keysn_13>;
		unifykey-index-14= <&keysn_14>;
		unifykey-index-15= <&keysn_15>;

		keysn_0: key_0{
			key-name = "usid";
			key-device = "normal";
			key-permit = "read","write","del";
		};
		keysn_1:key_1{
			key-name = "mac";
			key-device = "normal";
			key-permit = "read","write","del";
		};
		keysn_2:key_2{
			key-name = "hdcp";
			key-device = "secure";
			key-type = "sha1";
			key-permit = "read","write","del";
		};
		keysn_3:key_3{
			key-name = "secure_boot_set";
			key-device = "efuse";
			key-permit = "write";
		};
		keysn_4:key_4{
			key-name = "mac_bt";
			key-device = "normal";
			key-permit = "read","write","del";
			key-type  = "mac";
		};
		keysn_5:key_5{
			key-name = "mac_wifi";
			key-device = "normal";
			key-permit = "read","write","del";
			key-type = "mac";
		};
		keysn_6:key_6{
			key-name = "hdcp2_tx";
			key-device = "normal";
			key-permit = "read","write","del";
		};
		keysn_7:key_7{
			key-name = "hdcp2_rx";
			key-device = "normal";
			key-permit = "read","write","del";
		};
		keysn_8:key_8{
			key-name = "widevinekeybox";
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_9:key_9{
			key-name = "deviceid";
			key-device = "normal";
			key-permit = "read","write","del";
		};
		keysn_10:key_10{
			key-name = "hdcp22_fw_private";
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_11:key_11{
			key-name = "PlayReadykeybox25";
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_12:key_12{
			key-name = "prpubkeybox";// PlayReady
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_13:key_13{
			key-name = "prprivkeybox";// PlayReady
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_14:key_14{
			key-name = "netflix_mgkid";
			key-device = "secure";
			key-permit = "read","write","del";
		};
		keysn_15:key_15{
			key-name = "eth_exphy_para";
			key-device = "normal";
			key-permit = "read","write","del";
		};
	};//End unifykey

	efuse: efuse {
		compatible = "amlogic, efuse";
		read_cmd = <0x82000030>;
		write_cmd = <0x82000031>;
		get_max_cmd = <0x82000033>;
		key = <&efusekey>;
		status = "okay";
	};

	efusekey:efusekey {
		keynum = <1>;
		key0 = <&key_0>;
		key_0:key_0 {
			keyname = "mac";
			offset = <0>;
			size = <6>;
		};
	};//End efusekey

	amlvecm {
		compatible = "amlogic, vecm";
		dev_name = "aml_vecm";
		status = "okay";
		gamma_en = <0>;/*1:enabel ;0:disable*/
		wb_en = <0>;/*1:enabel ;0:disable*/
		cm_en = <0>;/*1:enabel ;0:disable*/

		interrupts = <0 56 1>;
		interrupt-names = "vsync2";
	};
    
	amdolby_vision {
		compatible = "amlogic, dolby_vision_g12a";
		dev_name = "aml_amdolby_vision_driver";
		status = "okay";
		tv_mode = <0>;/*1:enabel ;0:disable*/
	};

	/* Audio Related start */
	pdm_codec:dummy{
		#sound-dai-cells = <0>;
		compatible = "amlogic, pdm_dummy_codec";
		status = "okay";
	};
    
	spdif_codec:spdif_dummy{
		#sound-dai-cells = <0>;
		compatible = "linux,spdif-dit";
		status = "okay";
	};
    
	dummy_codec:dummy{
		#sound-dai-cells = <0>;
		compatible = "amlogic, aml_dummy_codec";
		status = "okay";
	};
    
	amlogic_codec:t9015{
		#sound-dai-cells = <0>;
		compatible = "amlogic, aml_codec_T9015";
		reg = <0x0 0xFF632000 0x0 0x2000>;
		is_auge_used = <1>; /* meson or auge chipset used */
		tdmout_index = <1>;
		status = "okay";
	};
    
	audio_effect:eqdrc{
		/*eq_enable = <1>;*/
		/*drc_enable = <1>;*/
		/*
		 * 0:tdmout_a
		 * 1:tdmout_b
		 * 2:tdmout_c
		 * 3:spdifout
		 * 4:spdifout_b
		 */
		eqdrc_module = <2>; // JEVOIS: was 1
		/* max 0xf, each bit for one lane, usually one lane */
		lane_mask = <0x1>;
		/* max 0xff, each bit for one channel */
		channel_mask = <0x3>;
	};
    
	auge_sound {
		compatible = "amlogic, g12a-sound-card";
		aml-audio-card,name = "AML-AUGESOUND";

		//aml-audio-card,aux-devs = <&amlogic_codec>;
		/*for audio effect ,eqdrc */
		aml-audio-card,effect = <&audio_effect>;

		aml-audio-card,dai-link@0 {
			mclk-fs = <128>;
			/* suffix-name, sync with android audio hal
			 * what's the dai link used for
			 */
			suffix-name = "alsaPORT-spdif-b";
			cpu {
				sound-dai = <&aml_spdif_b>;
				system-clock-frequency = <6144000>;
			};
			codec {
				sound-dai = <&spdif_codec>;
			};
		};

        // JEVOIS: BTPCM, we use tdmc on GPIOZ_2,3,6,7
        // VIM3 used tdma
		// aml-audio-card,dai-link@1 {
		// 	format = "dsp_a";
		// 	mclk-fs = <512>;
		// 	//continuous-clock;
		// 	//bitclock-inversion;
		// 	//frame-inversion;
		// 	//bitclock-master = <&tdmacodec>;
		// 	//frame-master = <&tdmacodec>;
		// 	/* suffix-name, sync with android audio hal
		// 	 * what's the dai link used for
		// 	 */
		// 	suffix-name = "alsaPORT-pcm";
		// 	tdmacpu: cpu {
		// 		sound-dai = <&aml_tdma>;
		// 		dai-tdm-slot-tx-mask =
		// 					<1 1 1 1 1 1 1 1>;
		// 		dai-tdm-slot-rx-mask =
		// 					<1 1 1 1 1 1 1 1>;
		// 		dai-tdm-slot-num = <8>;
		// 		dai-tdm-slot-width = <32>;
		// 		system-clock-frequency = <24576000>;
		// 	};
		// 	tdmacodec: codec {
		// 		sound-dai = <&dummy_codec &dummy_codec>;
		// 	};
		// };

        // JEVOIS; TDMB unused
		// aml-audio-card,dai-link@2 {
		// 	format = "i2s";
		// 	mclk-fs = <256>;
		// 	//continuous-clock;
		// 	//bitclock-inversion;
		// 	//frame-inversion;
		// 	bitclock-master = <&aml_tdmb>;
		// 	frame-master = <&aml_tdmb>;
		// 	//bitclock-master = <&tdmbcodec>;
		// 	//frame-master = <&tdmbcodec>;
		// 	/* suffix-name, sync with android audio hal
		// 	 * what's the dai link used for
		// 	 */
		// 	suffix-name = "alsaPORT-i2s";
		// 	cpu {
		// 		sound-dai = <&aml_tdmb>;
		// 		dai-tdm-slot-tx-mask = <1 1>;
		// 		dai-tdm-slot-rx-mask = <1 1>;
		// 		dai-tdm-slot-num = <2>;
		// 		dai-tdm-slot-width = <32>;
		// 		system-clock-frequency = <12288000>;
		// 	};
		// 	tdmbcodec: codec {
		// 		sound-dai = <&dummy_codec &dummy_codec
		// 		&amlogic_codec>;
		// 	};
		// };

		aml-audio-card,dai-link@3 {
			format = "i2s"; // JEVOIS was dsp_a i2s
			mclk-fs = <256>; // JEVOIS was 512 256
			//continuous-clock;
			//bitclock-inversion;
			//frame-inversion;
			//JEVOIS bitclock-master = <&aml_tdmc>;
			//JEVOIS frame-master = <&aml_tdmc>;
			/* suffix-name, sync with android audio hal
			 * what's the dai link used for
			 */
			suffix-name = "alsaPORT-pcm"; // was tdm
			cpu { ///////////////////////FIXME match TDMA above???
				sound-dai = <&aml_tdmc>;
				dai-tdm-slot-tx-mask = <1 1>;
				dai-tdm-slot-rx-mask = <1 1>;
				dai-tdm-slot-num = <2>;
				dai-tdm-slot-width = <32>;
				system-clock-frequency = <12288000>;
			};
			codec {
				sound-dai = <&dummy_codec &dummy_codec>;
			};
		};

		// aml-audio-card,dai-link@4 {
		// 	mclk-fs = <128>;
		// 	/* suffix-name, sync with android audio hal
		// 	 * what's the dai link used for
		// 	 */
		// 	suffix-name = "alsaPORT-spdif";
		// 	cpu {
		// 		sound-dai = <&aml_spdif>;
		// 		system-clock-frequency = <6144000>;
		// 	};
		// 	codec {
		// 		sound-dai = <&spdif_codec>;
		// 	};
		// };
	};
	audiolocker: locker {
		compatible = "amlogic, audiolocker";
		clocks = <&clkaudio CLKID_AUDIO_LOCKER_OUT
				&clkaudio CLKID_AUDIO_LOCKER_IN
				&clkaudio CLKID_AUDIO_MCLK_D
				&clkaudio CLKID_AUDIO_MCLK_E
				&clkc CLKID_MPLL1
				&clkc CLKID_MPLL2>;
		clock-names = "lock_out", "lock_in", "out_src",
					"in_src", "out_calc", "in_ref";
		interrupts = <GIC_SPI 1 IRQ_TYPE_EDGE_RISING>;
		interrupt-names = "irq";
		frequency = <49000000>; /* pll */
		dividor = <49>; /* locker's parent */
		status = "okay";
	};
	/* Audio Related end */

	cpu_opp_table0: cpu_opp_table0 {
		compatible = "operating-points-v2";
		opp-shared;

		opp00 {
			opp-hz = /bits/ 64 <500000000>;
			opp-microvolt = <730000>;
		};
		opp01 {
			opp-hz = /bits/ 64 <667000000>;
			opp-microvolt = <730000>;
		};
		opp02 {
			opp-hz = /bits/ 64 <1000000000>;
			opp-microvolt = <760000>;
		};
		opp03 {
			opp-hz = /bits/ 64 <1200000000>;
			opp-microvolt = <780000>;
		};
		opp04 {
			opp-hz = /bits/ 64 <1398000000>;
			opp-microvolt = <810000>;
		};
		opp05 {
			opp-hz = /bits/ 64 <1512000000>;
			opp-microvolt = <860000>;
		};
		opp06 {
			opp-hz = /bits/ 64 <1608000000>;
			opp-microvolt = <900000>;
		};
		opp07 {
			opp-hz = /bits/ 64 <1704000000>;
			opp-microvolt = <960000>;
		};
		opp08 {
			opp-hz = /bits/ 64 <1800000000>;
			opp-microvolt = <1020000>;
		};
		opp09 {
			opp-hz = /bits/ 64 <1908000000>;
			opp-microvolt = <1030000>;
		};
		opp10 {
			opp-hz = /bits/ 64 <2016000000>;
			opp-microvolt = <1040000>;
		};
		opp11 {
			opp-hz = /bits/ 64 <2100000000>;
			opp-microvolt = <1040000>;
		};
		opp12 {
			opp-hz = /bits/ 64 <2208000000>;
			opp-microvolt = <1040000>;
		};
	};

	cpu_opp_table1: cpu_opp_table1 {
		compatible = "operating-points-v2";
		opp-shared;

		opp00 {
			opp-hz = /bits/ 64 <500000000>;
			opp-microvolt = <730000>;
		};
		opp01 {
			opp-hz = /bits/ 64 <667000000>;
			opp-microvolt = <730000>;
		};
		opp02 {
			opp-hz = /bits/ 64 <1000000000>;
			opp-microvolt = <730000>;
		};
		opp03 {
			opp-hz = /bits/ 64 <1200000000>;
			opp-microvolt = <750000>;
		};
		opp04 {
			opp-hz = /bits/ 64 <1398000000>;
			opp-microvolt = <770000>;
		};
		opp05 {
			opp-hz = /bits/ 64 <1512000000>;
			opp-microvolt = <770000>;
		};
		opp06 {
			opp-hz = /bits/ 64 <1608000000>;
			opp-microvolt = <780000>;
		};
		opp07 {
			opp-hz = /bits/ 64 <1704000000>;
			opp-microvolt = <790000>;
		};
		opp08 {
			opp-hz = /bits/ 64 <1800000000>;
			opp-microvolt = <830000>;
		};
		opp09 {
			opp-hz = /bits/ 64 <1908000000>;
			opp-microvolt = <860000>;
		};
		opp10 {
			opp-hz = /bits/ 64 <2016000000>;
			opp-microvolt = <910000>;
		};
		opp11 {
			opp-hz = /bits/ 64 <2100000000>;
			opp-microvolt = <960000>;
		};
		opp12 {
			opp-hz = /bits/ 64 <2208000000>;
			opp-microvolt = <1030000>;
		};
		opp13 {
			opp-hz = /bits/ 64 <2304000000>;
			opp-microvolt = <1030000>;
		};
		opp14 {
			opp-hz = /bits/ 64 <2400000000>;
			opp-microvolt = <1040000>;
		};
	};

	cpufreq-meson {
		compatible = "amlogic, cpufreq-meson";
		status = "okay";
	};

    // JEVOIS: onewire interface on AUX connector, multiplexed with SPI_B_SS
    // Disabled by default, can be enable with overlay aux-onewire.dts
    onewire:onewire {
		status = "disabled";
		compatible = "w1-gpio";
		gpios = <&gpio GPIOH_6 GPIO_ACTIVE_HIGH>;
	};
    
    // JEVOIS: camera sensor
    // Note: disabled by default. Appropriate sensor is enabled later in an overlay.
    // IR-CUT GPIOS: positive on CAM_GPIO5=GPIOA_1, negative on CAM_GPIO6=GPIOA_2
	sensor: sensor {
		compatible = "soc, sensor";
		status = "disabled";
		pinctrl-names="default";

        // Pixel clock generator: should be gen_clk_ee_ao or gen_clk_ao_pin
        //////		pinctrl-0=<&gen_clk_ao_pin>; // JEVOIS FIXME
		pinctrl-0=<&gen_clk_ee_ao>;
            
		clocks = <&clkc CLKID_GEN_CLK>;
		clock-names = "gen_clk";

        // Sensor GPIOs:
        reset = <&gpio GPIOA_11 GPIO_ACTIVE_HIGH>; // JEVOIS CAM_RESET
        power-enable = <&gpio GPIOA_12 GPIO_ACTIVE_HIGH>; // JEVOIS CAM_PDN0
		ir_cut_gpio = <&gpio GPIOA_1 GPIO_ACTIVE_HIGH
                       &gpio GPIOA_2 GPIO_ACTIVE_HIGH>; // JEVOIS CAM_GPIO5=+, CAM_GPIO6=-
	};

    // JEVOIS: camera sensor image quality (IQ) module
    // Note: disabled by default. Appropriate sensor is enabled later in an overlay.
	iq: iq {
		compatible = "soc, iq";
		status = "disabled";
	};
}; /* end of / */

// JEVOIS: camera sensor image signal processor (ISP) hardware support
// Note: disabled by default. Appropriate sensor is enabled later in an overlay.
&isp {
	status = "disabled";
	memory-region = <&isp_cma_reserved>;
};

// JEVOIS: camera sensor adapter
// Note: disabled by default. Appropriate sensor is enabled later in an overlay.
&adapter {
	status = "disabled";
	memory-region = <&adapt_cma_reserved>;
};

// JEVOIS: FIXME
&gdc {
	status = "okay";
	memory-region = <&gdc_cma_reserved>;
};

// JEVOIS: use framebuffer for HDMI output
&meson_fb {
	status = "okay";
	display_size_default = <1920 1080 1920 2160 32>;
	mem_size = <0x00800000 0x4b80000 0x100000 0x100000 0x800000>;
	logo_addr = "0x7f800000";
	mem_alloc = <1>;
	pxp_mode = <0>; /** 0:normal mode 1:pxp mode */
	4k2k_fb = <1>;
};

// JEVOIS: this PWM is used for CPU voltage control
&pwm_ab {
	status = "okay";
};

// JEVOIS: unused for now, PWM_E=WIFI_32K, PWM_F=CAM_GPIO10 on GPIOZ_12
&pwm_ef {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&pwm_f_pins3>; // GPIOZ_12
};

// JEVOIS: PWMAO_C is for fan, PWMAO_D for VDDCPU_B_PWM
// PWM_AO_C is /sys/class/pwm/pwmchip8/pwm0 and is used for fan control
&pwm_AO_cd {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&pwm_ao_c_pins2>; // PWM_AO_C on GPIOAO_6
};

// JEVOIS: Camera sensor I2C uses i2c0 on GPIOZ_0,1 (defined as i2c0_master_pins2 in mesong12b.dtsi)
// Note: disabled by default. Appropriate sensor is enabled later in an overlay.
&i2c0 {
	status = "disabled";
	pinctrl-names="default";
	pinctrl-0=<&i2c0_master_pins2>;
	clock-frequency = <400000>; /* default 400k */
};

// JEVOIS: I2C1 is not available because pins are used for other functions.
&i2c1 {
	status = "disabled";
};

// JEVOIS: I2C2 is available on AUX conn, uses GPIOZ_14,15 (defined as i2c2_master_pins2 in mesong12b.dtsi)
// Note: disabled by default so that GPIOs are not claimed. Can be enabled by overlay aux-i2c.dts
&i2c2 {
	status = "disabled";
	pinctrl-names="default";
	pinctrl-0=<&i2c2_master_pins2>;
	clock-frequency = <400000>; /* default 400k */
};

// JEVOIS: I2C3 is available on M.2 PCIe conn, uses GPIOA_14,15 (defined as i2c3_master_pins2 in mesong12b.dtsi)
// Note: disabled by default
&i2c3 {
	status = "disabled";
	pinctrl-names="default";
	pinctrl-0=<&i2c3_master_pins2>;
	clock-frequency = <400000>; /* default 400k */
};

// JEVOIS: i2c_AO is connected to M.2 camera connector (3.3V). JEVOIS uses GPIOAO_2,3 (ao_i2c_master_pins1)
// Currently unused (not connected on IMX290 board).
&i2c_AO {
	status = "disabled";
	pinctrl-names="default";
	pinctrl-0=<&ao_i2c_master_pins1>;
	clock-frequency = <400000>; /* default 400k */
};

&audiobus {
    // VIM3 uses TDMA as BTPCM; JEVOIS uses those pins for SPI_A
	// aml_tdma: tdma {
	// 	compatible = "amlogic, g12a-snd-tdma";
	// 	#sound-dai-cells = <0>;
	// 	dai-tdm-lane-slot-mask-in = <0 1>;
	// 	dai-tdm-oe-lane-slot-mask-out = <1 0>;
	// 	dai-tdm-clk-sel = <0>;
	// 	clocks = <&clkaudio CLKID_AUDIO_MCLK_A
	// 			&clkc CLKID_MPLL0>;
	// 	clock-names = "mclk", "clk_srcpll";
	// 	pinctrl-names = "tdm_pins";
	// 	pinctrl-0 = <&tdmout_a &tdmin_a>;
	// };

    // JEVOIS: TDMB not used
	// aml_tdmb: tdmb {
	// 	compatible = "amlogic, g12a-snd-tdmb";
	// 	#sound-dai-cells = <0>;
	// 	dai-tdm-lane-slot-mask-in = <0 1 0 0>;
	// 	dai-tdm-lane-slot-mask-out = <1 0 0 0>;
	// 	dai-tdm-clk-sel = <1>;
	// 	clocks = <&clkaudio CLKID_AUDIO_MCLK_B
	// 			&clkc CLKID_MPLL1
	// 			&clkc CLKID_MPLL0
	// 			&clkaudio CLKID_AUDIO_SPDIFOUT_CTRL>;
	// 	clock-names = "mclk", "clk_srcpll",
	// 		"samesource_srcpll", "samesource_clk";
	// 	pinctrl-names = "tdm_pins";
	// 	pinctrl-0 = <&tdmb_mclk &tdmout_b &tdmin_b>;
	// 	mclk_pad = <0>;  /* 0: mclk_0; 1: mclk_1 */
	// 	/*
	// 	 * 0: tdmout_a;
	// 	 * 1: tdmout_b;
	// 	 * 2: tdmout_c;
	// 	 * 3: spdifout;
	// 	 * 4: spdifout_b;
	// 	 */
	// 	samesource_sel = <3>;
	// };

    // JEVOIS: TDMC connected to BTPCM in M.2 PCIe conn
	aml_tdmc: tdmc {
		compatible = "amlogic, g12a-snd-tdmc";
		#sound-dai-cells = <0>;
		dai-tdm-lane-slot-mask-in = <1 0 0 0>;
		#dai-tdm-lane-slot-mask-out = <1 0 1 1>;
		#dai-tdm-lane-oe-slot-mask-in = <0 0 0 0>;
		#dai-tdm-lane-oe-slot-mask-out = <1 0 0 0>;
		dai-tdm-clk-sel = <2>;
		clocks = <&clkaudio CLKID_AUDIO_MCLK_C
				&clkc CLKID_MPLL2>;
		clock-names = "mclk", "clk_srcpll";
		pinctrl-names = "tdm_pins";
		pinctrl-0 = <&tdmout_c &tdmin_c>;
		//VIM3: pinctrl-0 = <&tdmc_mclk &tdmout_c &tdmin_c>;
		//VIM3: mclk_pad = <1>;  /* 0: mclk_0; 1: mclk_1 */
	};

    // JEVOIS: looks like audio loopback
	tdmlb: tdm@3 {
		compatible = "amlogic, g12a-snd-tdmlb";
		#sound-dai-cells = <0>;
		dai-tdm-lane-lb-slot-mask-in = <1 0 0 0>;
		dai-tdm-clk-sel = <1>;
		clocks = <&clkaudio CLKID_AUDIO_MCLK_B
				&clkc CLKID_MPLL1>;
		clock-names = "mclk", "clk_srcpll";
		/*
		 * select tdmin_lb src;
		 *0: TDMOUTA
		 *1: TDMOUTB
		 *2: TDMOUTC
		 *3: PAD_TDMINA
		 *4: PAD_TDMINB
		 *5: PAD_TDMINC
		 */
		lb-src-sel = <2>; // JEVOIS select TDMC (was 1 on VIM3)
		status = "okay";
	};

    // Audio SPDIF
	aml_spdif: spdif {
		compatible = "amlogic, g12a-snd-spdif-a";
		#sound-dai-cells = <0>;
		clocks = <&clkc CLKID_MPLL0
				&clkc CLKID_FCLK_DIV4
				&clkaudio CLKID_AUDIO_SPDIFIN
				&clkaudio CLKID_AUDIO_SPDIFOUT
				&clkaudio CLKID_AUDIO_SPDIFIN_CTRL
				&clkaudio CLKID_AUDIO_SPDIFOUT_CTRL>;
		clock-names = "sysclk", "fixed_clk", "gate_spdifin",
				"gate_spdifout", "clk_spdifin", "clk_spdifout";
		interrupts =
				<GIC_SPI 151 IRQ_TYPE_EDGE_RISING>;

		interrupt-names = "irq_spdifin";
		pinctrl-names = "spdif_pins",
					"spdif_pins_mute";
		pinctrl-0 = <&spdifout>;
		pinctrl-1 = <&spdifout_a_mute>;
		status = "okay";
	};
    
	aml_spdif_b: spdif_b {
		compatible = "amlogic, g12a-snd-spdif-b";
		#sound-dai-cells = <0>;
		clocks = <&clkc CLKID_MPLL0 /*CLKID_HIFI_PLL*/
				&clkaudio CLKID_AUDIO_SPDIFOUTB
				&clkaudio CLKID_AUDIO_SPDIFOUTB_CTRL>;
		clock-names = "sysclk",
				"gate_spdifout", "clk_spdifout";
		status = "okay";
	};

    // JEVOIS: not sure what this is but we use those pins for something else
	// aml_pdm: pdm {
	// 	compatible = "amlogic, g12a-snd-pdm";
	// 	#sound-dai-cells = <0>;
	// 	clocks = <&clkaudio CLKID_AUDIO_PDM
	// 		&clkc CLKID_FCLK_DIV3
	// 		&clkc CLKID_MPLL3
	// 		&clkaudio CLKID_AUDIO_PDMIN0
	// 		&clkaudio CLKID_AUDIO_PDMIN1>;
	// 	clock-names = "gate",
	// 		"sysclk_srcpll",
	// 		"dclk_srcpll",
	// 		"pdm_dclk",
	// 		"pdm_sysclk";
	// 	pinctrl-names = "pdm_pins";
	// 	pinctrl-0 = <&pdmin>;
	// 	filter_mode = <1>; /* mode 0~4, defalut:1 */
	// 	status = "disable";
	// };

	loopback:loopback@0 {
		compatible = "amlogic, g12a-loopback";
		#sound-dai-cells = <0>;

		clocks = <&clkaudio CLKID_AUDIO_PDM
			&clkc CLKID_FCLK_DIV3
			&clkc CLKID_MPLL3
			&clkaudio CLKID_AUDIO_PDMIN0
			&clkaudio CLKID_AUDIO_PDMIN1
			&clkc CLKID_MPLL0
			&clkaudio CLKID_AUDIO_MCLK_A>;
		clock-names = "pdm_gate",
			"pdm_sysclk_srcpll",
			"pdm_dclk_srcpll",
			"pdm_dclk",
			"pdm_sysclk",
			"tdminlb_mpll",
			"tdminlb_mclk";

		/* datain src
		 * 0: tdmin_a;
		 * 1: tdmin_b;
		 * 2: tdmin_c;
		 * 3: spdifin;
		 * 4: pdmin;
		 */
		datain_src = <2>; // JEVOIS was 4
		datain_chnum = <2>; // JEVOIS was 4
		datain_chmask = <0xf>;
		/* config which data pin for loopback */
		datain-lane-mask-in = <1 0 1 0>;

		/* calc mclk for datalb */
		mclk-fs = <256>;

		/* tdmin_lb src
		 * 0: tdmoutA
		 * 1: tdmoutB
		 * 2: tdmoutC
		 * 3: PAD_TDMINA_DIN*, refer to core pinmux
		 * 4: PAD_TDMINB_DIN*, refer to core pinmux
		 * 5: PAD_TDMINC_DIN*, refer to core pinmux
		 * 6: PAD_TDMINA_D*, oe, refer to core pinmux
		 * 7: PAD_TDMINB_D*, oe, refer to core pinmux
		 */
		/* if tdmin_lb >= 3, use external loopback */
		datalb_src = <2>; // JEVOIS was 1
		datalb_chnum = <2>;
		datalb_chmask = <0x3>;
		/* config which data pin as loopback */
		datalb-lane-mask-in = <1 0 0 0>;

		status = "disabled";
	};

	audioresample: resample {
		compatible = "amlogic, g12a-resample";
		clocks = <&clkc CLKID_MPLL3
				&clkaudio CLKID_AUDIO_MCLK_F
				&clkaudio CLKID_AUDIO_RESAMPLE_CTRL>;
		clock-names = "resample_pll", "resample_src", "resample_clk";
		/*same with toddr_src
		 *	TDMIN_A, 0
		 *	TDMIN_B, 1
		 *	TDMIN_C, 2
		 *	SPDIFIN, 3
		 *	PDMIN,  4
		 *	NONE,
		 *	TDMIN_LB, 6
		 *	LOOPBACK, 7
		 */
		resample_module = <4>;
		status = "disabled";
	};
    
	aml_pwrdet: pwrdet {
		compatible = "amlogic, g12a-power-detect";

		interrupts = <GIC_SPI 155 IRQ_TYPE_EDGE_RISING>;
		interrupt-names = "pwrdet_irq";

		/* pwrdet source sel
		 * 7: loopback;
		 * 6: tdmin_lb;
		 * 5: reserved;
		 * 4: pdmin;
		 * 3: spdifin;
		 * 2: tdmin_c;
		 * 1: tdmin_b;
		 * 0: tdmin_a;
		 */
		pwrdet_src = <4>;

		hi_th = <0x70000>;
		lo_th = <0x16000>;

		status = "disabled";
	};
}; /* end of audiobus */

&pinctrl_periphs {
    // AUDIO TDMA: VIM3 uses GPIOX_8,9,10,11 connected to BTPCM
    // JEVOIS does not use TDMA, those pins are used for SPI_A instead
	// tdmout_a: tdmout_a {
	// 	mux { /* GPIOX_11, GPIOX_10, GPIOX_9 */
	// 		groups = "tdma_sclk",
	// 			"tdma_fs",
	// 			"tdma_dout0";
	// 		function = "tdma_out";
	// 	};
	// };
	// tdmin_a: tdmin_a {
	// 	mux { /* GPIOX_8 */
	// 		groups = "tdma_din1";
	// 		function = "tdma_in";
	// 	};
	// };

    // AUDIO TDMB: VIM3 uses it as i2s on their aux connector
    // JEVOIS uses the tdmb pins on GPIOA, GPIOH, GPIOAO for other things. Thus disabled.
	// tdmb_mclk: tdmb_mclk {
	// 	mux {
	// 		groups = "mclk0_a";
	// 		function = "mclk0";
	// 		drive-strength = <2>;
	// 	};
	// };
	// tdmout_b: tdmout_b {
	// 	mux { /* GPIOA_1, GPIOA_2, GPIOA_3 */
	// 		groups = "tdmb_sclk",
	// 			"tdmb_fs",
	// 			"tdmb_dout0";
	// 		function = "tdmb_out";
	// 		drive-strength = <2>;
	// 	};
	// };
	// tdmin_b:tdmin_b {
	// 	mux { /* GPIOA_4 */
	// 		groups = "tdmb_din1"
	// 			/*,"tdmb_slv_sclk", "tdmb_slv_fs"*/;
	// 		function = "tdmb_in";
	// 		drive-strength = <2>;
	// 	};
	// };

    // AUDIO TDMC: VIM3 uses GPIOA_7-13 connected to their M.2 socket in non-standard way.
    // JEVOIS uses GPIOZ_2,3,6,7 connected to M.2 PCIe card for BTPCM

    // JEVOIS has no MCLK because it uses PCM and not I2S
	// tdmc_mclk: tdmc_mclk {
	// 	mux { /* GPIOA_11 */
	// 		groups = "mclk1_a";
	// 		function = "mclk1";
	// 	};
	// };

	tdmout_c: tdmout_c {
		mux { /* CLK, SYNC, DOUT = VIM3: GPIOA_12,13,8,7, JEVOIS: GPIOZ_7,6,2 */
			groups = "tdmc_sclk_z",
				"tdmc_fs_z",
				"tdmc_dout0_z";
			function = "tdmc_out";
		};
	};
	tdmin_c: tdmin_c {
		mux { /* DIN = VIM3: GPIOA_10, JEVOIS: GPIOZ_3 */
			groups = "tdmc_din1_z";
			function = "tdmc_in";
		};
	};

    // JEVOIS: was used for CAM_MCLK on W400 (GPIOZ_13)
	// 	mux {
	// 		groups = "clk12_24_z";
	// 		function = "clk12_24_ee";
	// 		drive-strength = <3>;
	// 	};
    // };

    // JEVOIS: 12/24 clock generator for second camera sensor, on GPIOZ_13 to CAM_MCLK2 on camera M.2 conn
    // NOTE: Currently unused.
	clk12_24_z_pins:clk12_24_z_pins {
		mux {
			groups = "clk12_24_z";
			function = "clk12_24_ee";
			drive-strength = <3>;
		};
    };

    // JEVOIS: Clock generator for second camera sensor, on GPIOZ_13 to CAM_MCLK2 on camera M.2 conn
    // NOTE: Currently unused.
    gen_clk_ee_z_pin: gen_clk_ee_z_pin {
		mux {
			groups="gen_clk_ee_z";
			function="gen_clk_ee";
			drive-strength = <3>;
		};
	};
    
    // JEVOIS: not sure what this is but we use those pins for something else
	// pdmin: pdmin {
	// 	mux { /* gpioa_5, gpioa_6, gpioa_7, gpioa_8, gpioa_9*/
	// 		groups = "pdm_din0_a",
	// 		/*"pdm_din1_a",*/
	// 		/*"pdm_din2_a",*/
	// 		/*"pdm_din3_a",*/
	// 		"pdm_dclk_a";
	// 		function = "pdm";
	// 	};
	// };
}; /* end of pinctrl_periphs */

// JEVOIS: SPDIF output is available on a test pad connected to GPIOAO_10
&pinctrl_aobus {
	spdifout: spdifout {
		mux { /* gpiao_10 */
			groups = "spdif_out_ao";
			function = "spdif_out_ao";
		};
	};
    
	spdifout_a_mute: spdifout_a_mute {
		mux { /* gpiao_10 */
			groups = "GPIOAO_10";
			function = "gpio_aobus";
		};
	};

    // JEVOIS GPIO_AO6 is for the fan
	// bl_pwm_off_pins:bl_pwm_off_pin {
	// 	mux {
	// 		pins = "GPIOAO_6";
	// 		function = "gpio_aobus";
	// 		output-low;
	// 	};
	// };

    // JEVOIS: Clock generator for the camera sensor, on GPIOAO_11 to CAM_MCLK on camera M.2 conn
    // FIXME: does not work?
    gen_clk_ao_pin: gen_clk_ao_pin {
		mux {
			groups="gen_clk_ao";
			function="gen_clk_ao";
			drive-strength = <3>;
		};
	};

    // JEVOIS: Clock generator for the camera sensor, on GPIOAO_11 to CAM_MCLK on camera M.2 conn
	gen_clk_ee_ao: gen_clk_ee_ao {
		mux {
			groups="gen_clk_ee_ao";
			function="gen_clk_ee_ao";
			drive-strength = <3>;
		};
	};

};  /* end of pinctrl_aobus */

// JEVOIS: IR remote output. Pins could be GPIOH_6 (used for SPI_B) or GPIOZ_10 (used for CAM_ID1)
// or GPIOAO_4 (used by JEVOIS_LED). Thus it is disabled.
&irblaster {
	status = "disabled";
};

// JEVOIS: enable audio data
&audio_data {
	status = "okay";
};

// JEVOIS: video in used for encoding? FIXME
&vdin0 {
	memory-region = <&vdin0_cma_reserved>;
	status = "okay";
	/*vdin write mem color depth support:
	 *bit0:support 8bit
	 *bit1:support 9bit
	 *bit2:support 10bit
	 *bit3:support 12bit
	 *bit4:support yuv422 10bit full pack mode (from txl new add)
	 */
	tv_bit_mode = <0x15>;
};

&vdin1 {
	memory-region = <&vdin1_cma_reserved>;
	status = "okay";
	/*vdin write mem color depth support:
	 *bit0:support 8bit
	 *bit1:support 9bit
	 *bit2:support 10bit
	 *bit3:support 12bit
	 */
	tv_bit_mode = <1>;
};

// JEVOIS: eMMC pins are on M.2 PCIe connector. A311D supports up to HS200 (no HS400), 8-bit = 200 MByte/s
&sd_emmc_c {
	status = "disabled";
	emmc {
		caps = "MMC_CAP_8_BIT_DATA",
			 "MMC_CAP_MMC_HIGHSPEED",
			 "MMC_CAP_SD_HIGHSPEED",
			 "MMC_CAP_NONREMOVABLE",
			/* "MMC_CAP_1_8V_DDR", */
			 "MMC_CAP_HW_RESET",
			 "MMC_CAP_ERASE",
			 "MMC_CAP_CMD23",
			 "MMC_CAP_DRIVER_TYPE_A";
		caps2 = "MMC_CAP2_HS200";
		/*MMC_CAP2_HS400"*/
		f_min = <400000>;
		f_max = <200000000>;
	};
};

// JEVOIS sd card. SD_MODE (switch I/O voltage to 1.8V when active, for UHS-I SDR104 speed) is on GPIOA_9.
// We do not have a power on/off switch pin. SDR104 is supported.
&sd_emmc_b {
	status = "okay";
    sd-uhs-sdr25;
	sd-uhs-sdr50;
	sd-uhs-sdr104;
	max-frequency = <208000000>;
	sd {
		caps = "MMC_CAP_4_BIT_DATA",
			 "MMC_CAP_UHS_SDR25",
			 "MMC_CAP_UHS_SDR50",
			 "MMC_CAP_UHS_SDR104",
			 "MMC_CAP_MMC_HIGHSPEED",
			 "MMC_CAP_SD_HIGHSPEED",
			 "MMC_CAP_ERASE",
			 "MMC_CAP_CMD23";
		vol_switch = <&gpio GPIOA_9 GPIO_ACTIVE_HIGH>;
		vol_switch_18 = <1>;
		f_min = <400000>;
		f_max = <208000000>;
	};
};

// JEVOIS sdio on M.2 PCIE connector
&sd_emmc_a {
	status = "disabled";
	sdio {
		caps = "MMC_CAP_4_BIT_DATA",
			 "MMC_CAP_MMC_HIGHSPEED",
			 "MMC_CAP_SD_HIGHSPEED",
			 "MMC_CAP_NONREMOVABLE",
			 "MMC_CAP_UHS_SDR12",
			 "MMC_CAP_UHS_SDR25",
			 "MMC_CAP_UHS_SDR50",
			 "MMC_CAP_UHS_SDR104",
			 "MMC_PM_KEEP_POWER",
			 "MMC_CAP_SDIO_IRQ";
		f_min = <400000>;
		f_max = <200000000>;
	};
};

// JEVOIS: we use the USB3 controller, but only with USB2 data as we use PCIe instead of USB3 SSTX/SSRX
&dwc3 {
	status = "okay";
};

// JEVOIS: USB2 OTG connected to 4-pin mini-USB (OTG) connector, power enable pin USB_PWR_EN on GPIOA_6
// USB ID/OTG host vs. device detection pin is a dedicated pin (not GPIO).
&usb2_phy_v2 {
	status = "okay";
	portnum = <2>;
	gpio-vbus-power = "GPIOA_6";
	gpios = <&gpio GPIOA_6 GPIO_ACTIVE_HIGH>;
};

// JEVOIS: USB3 port PHY:
&usb3_phy_v2 {
	status = "okay";
	portnum = <1>;
	otg = <1>;
};

// JEVOIS USB2 OTG port PHY:
&dwc2_a {
	status = "okay";
	/** 0: normal, 1: otg+dwc3 host only, 2: otg+dwc3 device only*/
	controller-type = <3>;
};

// JEVOIS: UART on 4-pin serial on GPIOAO_8,9 and /dev/ttyS4 under Linux.
// /dev/ttyS0 is the console, exported to test pads and enabled by default (uart_AO_A)
&uart_AO_B {
	status = "okay";
	pinctrl-0 = <&ao_b_uart_pins2>; // JEVOIS: added definition in mesong12b.dtsi for GPIOAO_8,9
};

// JEVOIS: we use PCIe and thus not USB3 (run USB3 port as USB2 only):
// We use GPIOA_7 connected to PERST0# on M.2 PCIe conn
// We use GPIOZ_8 as WIFI_RESET connected to SDIO_Reset of M.2 PCIe conn
// We use GPIOX_6 as WIFI_PWREN connected to W_DISABLE#1 of M.2 PCIe conn
// We use GPIOX_17 as BT_EN connected to W_DISABLE#2 of M.2 PCIe conn
// NOTE: we connect GPIOC_7 to PCIECK_REQN but it looks like maybe the software does not support this
// (GPIOC_7 is only defined as world_sync_c_pins in pinctrl-meson-g12a.c)
&pcie_A {
    reset-gpio = <&gpio GPIOA_7 GPIO_ACTIVE_HIGH>; // PERST0# (JEVOIS: used by TPU1, WIFI cards, etc)
    reset2-gpio = <&gpio GPIOZ_8 GPIO_ACTIVE_HIGH>; // WIFI_RESET; JEVOIS only: reset a second device (e.g., TPU2)
    power1-gpio = <&gpio GPIOX_6 GPIO_ACTIVE_HIGH>; // JEVOIS only: power on a device (e.g., TPU1)
    power2-gpio = <&gpio GPIOX_17 GPIO_ACTIVE_HIGH>; // JEVOIS only: power on a device (e.g., TPU2)
    status = "okay";
};

// JEVOIS: the SARADC converter is not connected.
&saradc {
	status = "disabled";
};

// JEVOIS: SPI_A (GPIOX_8-11) to M.2 camera conn for IMU:
// Note: disabled by default, can be enabled using icm20948.dts overlay.
&spicc0 {
	status = "disabled";
	pinctrl-names = "default";
	pinctrl-0 = <&spicc0_pins_x>;
	cs-gpios = <&gpio GPIOX_10 0>; // SPI_A_SS0
};

// JEVOIS: SPI_B (GPIOH_4-7) to AUX connector. Disabled by default so GPIOs are not claimed.
// Can be enabled using overlay aux-spi.dts
&spicc1 {
	status = "disabled";
	pinctrl-names = "default";
	pinctrl-0 = <&spicc1_pins>;
	cs-gpios = <&gpio GPIOH_6 0>; // SPI_B_SS0
};

// JEVOIS: IR remote input on GPIOAO_5
&remote {
	status = "okay";
};


// JEVOIS: no LCD
// &lcd {
//      status = "disabled";
// 	lcd_cpu-gpios = <&gpio_expander 0 GPIO_ACTIVE_HIGH
// 	        &gpio_expander 1 GPIO_ACTIVE_HIGH>;
// 	lcd_cpu_gpio_names = "GPIO_EXPANDER_0","GPIO_EXPANDER_1";
// };

// JEVOIS: watchdog timer, disabled by default, can be enabled with wdt.dts overlay.
&wdt {
	reset_watchdog_method = <0>; /* 0:sysfs,1:kernel */
	status = "disabled";
};
