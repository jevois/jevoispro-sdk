# Functions:
# check_modifications
# update_git_repo

check_modifications() {
	# Check modifications
	CHANGED_FILES=$(git diff --name-only)
	if [ -n "$CHANGED_FILES" ]; then
		echo -e "$WARNING: Repo[$(pwd)] You made some modifications to file(s): \n[ $GREEN\n${CHANGED_FILES}$ENDCOLOR \n]"
		return -1
	fi

	return 0
}

## Update git repository
## $1 git repository path
## $2 git branch

GIT_UPDATE_IGNORE_FLAG=.ignore-update
GIT_UPDATE_IGNORE_NOTIFY="[TIPS] same can solve this via \`NO_GIT_UPDATE=1 make\` or \`touch $GIT_UPDATE_IGNORE_FLAG; make\`"

update_git_repo() {
    [ "$NO_GIT_UPDATE" ] && {
	info_msg "Git update was disabled by NO_GIT_UPDATE"
	return
    }
    if [ ! -f $ROOT/$GIT_UPDATE_IGNORE_FLAG ]; then
        if [ "$1" == "" ] || [ "$2" == "" ]; then
            echo "Usage: $0 <repository_path> <git_branch>"
            return -1
        fi

        cd $1
        if [ ! -d .git ]; then
            error_msg "No Git repository [$2] found at $1!"
            cd -
            return -1
        fi

		if check_modifications; then
			HAVE_MODIFYCATIONS=0
		else
			HAVE_MODIFYCATIONS=1
		fi

        info_msg "Try to update `basename $1`:$2"

        if ! git branch | grep "^* $2$" > /dev/null; then
			if [ $HAVE_MODIFYCATIONS -ne 0 ]; then
				# Found modifications
				error_msg "$1: can't checkout to branch '$2', please commit your modifications and try again!"
				echo "$GIT_UPDATE_IGNORE_NOTIFY"
				return -1
			fi

			git checkout $2
        fi

        git pull origin $2
		[ "$NO_ASK" ] || \
		if [ $HAVE_MODIFYCATIONS -ne 0 ]; then
			echo -e "Press $YELLOW<Ctrl-C>$ENDCOLOR to abort compilation, $YELLOW<Enter>$ENDCOLOR to ignore and continue"
			echo "$GIT_UPDATE_IGNORE_NOTIFY"
			read
		fi

        cd -
    fi
}

